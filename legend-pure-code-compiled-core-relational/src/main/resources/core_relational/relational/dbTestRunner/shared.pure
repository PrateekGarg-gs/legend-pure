// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::runtime::*;
import meta::relational::dbTestRunner::*;

Profile meta::relational::dbTestRunner::dbTest
{
   stereotypes : [ Test, Ignore ];
}

Class meta::relational::dbTestRunner::DbTestConfig
{
   dbType: DatabaseType[1];
   expectedSql: String[0..1];
}

function meta::relational::dbTestRunner::collectTests(pack: Package[1]): Function<{DbTestConfig[1] -> String[0..1]}>[*]
{
   $pack.children->map(c| $c->match([
      f:Function<Any>[1]| if($f.stereotypes->contains(dbTest->stereotype('Test')), |$f->cast(@Function<{DbTestConfig[1] -> String[0..1]}>), |[]),
      p:Package[1]| collectTests($p),
      x:Any[1]| []
   ]));
}

function meta::relational::dbTestRunner::runTestsWith(dbTestFns: Function<{DbTestConfig[1] -> String[0..1]}>[*],
                                               dbType: DatabaseType[1],
                                               expectedSqls: Map<Function<{DbTestConfig[1] -> String[0..1]}>, String>[0..1]
                                               ): Boolean[1]
{
  let failures = $dbTestFns->map(f|
      println('running test : '+ $f->elementToPath());
      let result = $f->eval(^DbTestConfig(dbType=$dbType, expectedSql=if($expectedSqls->isEmpty(), |[], |$expectedSqls->toOne()->get($f))));
      if($result->isEmpty(), |[], |'\n'+ $f->elementToPath() + ': ' + $result->toOne());
  );
  assertEmpty($failures);
}